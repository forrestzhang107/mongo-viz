{"version":3,"sources":["services.js","Database.js","ObjectToggle.js","Document.js","Collection.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","GetDatabaseInfo","a","get","GetDocuments","payload","JSON","stringify","GetDocumentCount","GetServerConfig","Home","props","useState","databaseID","setDatabaseID","data","setData","useEffect","config","database","res","fetch","Container","className","map","obj","index","key","onClick","collectionID","history","push","count","size","avgObjSize","renderData","ObjectToggle","open","setOpen","object","keys","Object","test","isPrimitive","renderProp","Document","toString","Collection","setCollectionID","page","setPage","pages","setPages","query","setQuery","queryString","setQueryString","sort","setSort","sortString","setSortString","getDatabaseID","parse","qs","window","location","search","id","getPages","getData","str","substring","length","replace","split","forEach","prop","tup","parseQuery","isNaN","parseInt","parseSort","to","renderAppNav","renderPageNav","Row","Col","lg","type","value","onChange","evt","target","doc","Math","ceil","App","path","component","Database","from","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b6f5771c.chunk.js","sourcesContent":["const axios = require('axios')\n\nexport async function GetDatabaseInfo() {\n  return await axios.get('/api/get-database-info')\n}\n\nexport async function GetDocuments(payload) {\n  return await axios.get('/api/get-documents/' + JSON.stringify(payload))\n}\n\nexport async function GetDocumentCount(payload) {\n  return await axios.get('/api/get-document-count/' + JSON.stringify(payload))\n}\n\nexport async function GetServerConfig() {\n  return await axios.get('/api/get-server-config')\n}\n","import React, { useState, useEffect } from 'react'\nimport { Container } from 'react-bootstrap'\nimport { GetDatabaseInfo, GetServerConfig } from './services'\n\nfunction Home(props) {\n\n  const [databaseID, setDatabaseID] = useState('')\n  const [data, setData] = useState(null)\n\n  useEffect(() => {\n    async function fetch() {\n      const config = (await GetServerConfig()).data\n      setDatabaseID(config.database)\n      const res = await GetDatabaseInfo()\n      setData(res.data)\n    }\n    fetch()\n  }, [])\n\n  // JSX\n\n  return (\n    <Container className='first center'>\n    <h3 className='mb-25'>{databaseID}</h3>\n    {renderData()}\n    </Container>\n  )\n\n  function renderData() {\n    if (data) {\n      return (\n        <table className='db-table'>\n        <thead>\n        <tr>\n        <th>Collection</th>\n        <th>Count</th>\n        <th>Size</th>\n        <th>Average Size</th>\n        </tr>\n        </thead>\n        <tbody>\n        {data.map((obj, index) =>\n          <tr key={index}\n          className='collection'\n          onClick={() => toCollection(obj.collectionID)}>\n          <td>{obj.collectionID}</td>\n          <td>{obj.count}</td>\n          <td>{obj.size}</td>\n          <td>{obj.avgObjSize}</td>\n          </tr>\n        )}\n        </tbody>\n        </table>\n      )\n    }\n  }\n\n  // Helpers\n\n  function toCollection(collectionID) {\n    props.history.push('/collection/?id='+collectionID)\n  }\n\n\n}\n\nexport default Home\n","import React, {useState} from 'react'\n\nfunction ObjectToggle(props) {\n\n  const [open, setOpen] = useState(false)\n\n  const obj = props.object\n  const keys = Object.keys(obj)\n  if (open) {\n    return (\n      <span>\n        <span className='toggle' onClick={() => setOpen(false)}>\n          <i className=\"fas fa-angle-up\"></i>\n        </span>\n        <div className='object-toggle'>\n        {keys.map((key, index) =>\n          <div key={index}>{key}: {renderProp(obj[key])}</div>\n        )}\n        </div>\n      </span>\n    )\n  }\n  else return (\n    <span onClick={() => setOpen(true)} className='toggle'>\n      <i className=\"fas fa-angle-down\"></i>\n    </span>\n  )\n\n  function renderProp(obj) {\n    if (isPrimitive(obj)) return obj\n    return (\n      <div className='object-toggle'>\n      <ObjectToggle object={obj} />\n      </div>\n    )\n  }\n\n  // Helpers\n\n  function isPrimitive(test) {\n    return test !== Object(test)\n  }\n\n}\n\nexport default ObjectToggle\n","import React from 'react'\nimport ObjectToggle from './ObjectToggle'\n\nfunction Document(props) {\n\n  const obj = props.data\n  const keys = Object.keys(obj)\n\n  return (\n    <div className='document'>\n    {keys.map((key, index) =>\n      <div key={index}>{key}: {renderProp(obj[key])}</div>\n    )}\n    </div>\n  )\n\n  // Helpers\n\n  function renderProp(obj) {\n    if (isPrimitive(obj)) return obj.toString()\n    else return <ObjectToggle object={obj} />\n  }\n\n\n  function isPrimitive(test) {\n    return test !== Object(test)\n  }\n\n}\n\nexport default Document\n","import React, { useState, useEffect } from 'react'\nimport { Container, Row, Col } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport Document from './Document'\nimport qs from 'query-string'\nimport { GetServerConfig, GetDocuments, GetDocumentCount } from './services'\n\nfunction Collection(props) {\n\n  const [databaseID, setDatabaseID] = useState(null)\n  const [collectionID, setCollectionID] = useState(null)\n  const [page, setPage] = useState(1)\n  const [pages, setPages] = useState(null)\n  const [data, setData] = useState(null)\n  const [query, setQuery] = useState('')\n  const [queryString, setQueryString] = useState('{}')\n  const [sort, setSort] = useState('')\n  const [sortString, setSortString] = useState('{}')\n\n  useEffect(() => {\n    getDatabaseID()\n    const parse = qs.parse(window.location.search)\n    setCollectionID(parse.id)\n    if (parse.page) setPage(parse.page)\n  }, [])\n\n  useEffect(() => {\n    if (collectionID) getPages({\n      collectionID: collectionID,\n      query: JSON.parse(queryString),\n    })\n  }, [collectionID, queryString])\n\n  useEffect(() => {\n    if (collectionID) getData({\n      collectionID: collectionID,\n      page: page,\n      query: JSON.parse(queryString),\n      sort: JSON.parse(sortString),\n    })\n  }, [collectionID, page, queryString, sortString])\n\n  useEffect(() => {\n    const str = parseQuery(query)\n    setQueryString(str)\n  }, [query])\n\n  useEffect(() => {\n    const str = parseSort(sort)\n    setSortString(str)\n  }, [sort])\n\n  // JSX\n\n  return (\n    <Container className='first center'>\n    <div className='mb-25'>\n      <h3>{collectionID}</h3>\n      <div className='hspread'>\n        {renderAppNav()}\n        {renderPageNav()}\n      </div>\n    </div>\n    {renderOptions()}\n    {renderData()}\n    </Container>\n  )\n\n  function renderData() {\n    if (data) {\n      return (\n        <div>\n        <div className='mb-25'>\n        </div>\n        {data.map((doc, index) =>\n          <Document key={index} data={doc} />\n        )}\n        </div>\n      )\n    }\n  }\n\n  function renderOptions() {\n    return (\n      <Row>\n      <Col lg={6}>\n      <div className='hspread vcenter'>\n      <div>Query:</div>\n      <input className='opt-input' type='text'\n      value={query} onChange={evt => setQuery(evt.target.value)} />\n      </div>\n      </Col>\n      <Col lg={6}>\n      <div className='hspread vcenter'>\n      <div>Sort:</div>\n      <input className='opt-input' type='text'\n      value={sort} onChange={evt => setSort(evt.target.value)} />\n      </div>\n      </Col>\n      </Row>\n    )\n  }\n\n  function renderAppNav() {\n    if (databaseID) {\n      return (\n        <div>\n          <Link to='/database'>{databaseID}</Link>\n          <i className=\"divider fas fa-chevron-right\"></i>\n          <Link to={'/collection/?id=' + collectionID}>{collectionID}</Link>\n        </div>\n      )\n    }\n  }\n\n  function renderPageNav() {\n    if (pages) {\n      return (\n        <div>\n        {page > 1 ? <i onClick={() => setPage(page-1)} className=\"nav-arrow fas fa-chevron-left\"></i> : ''}\n        {page + ' of ' + pages}\n        {(page < pages) ? <i onClick={() => setPage(page+1)} className=\"nav-arrow fas fa-chevron-right\"></i> : ''}\n        </div>\n      )\n    }\n  }\n\n  // Helpers\n\n  async function getDatabaseID() {\n    const config = (await GetServerConfig()).data\n    setDatabaseID(config.database)\n  }\n\n  async function getData(payload) {\n    setData(null)\n    const data = (await GetDocuments(payload)).data\n    setData(data)\n  }\n\n  async function getPages(payload) {\n    setPages(null)\n    const count = (await GetDocumentCount(payload)).data\n    setPages(Math.ceil(count/10))\n  }\n\n  function parseQuery(str) {\n    if (str[0] === '{') str = str.substring(1, str.length-1)\n    str = str.replace(/ |'|\"/g,'')\n    const props = str.split(',')\n    const obj = {}\n    props.forEach((prop) => {\n        const tup = prop.split(':')\n        if (!tup[1]) return '{}'\n        obj[tup[0]] = tup[1]\n    })\n    return JSON.stringify(obj)\n  }\n\n  function parseSort(str) {\n    if (str[0] === '{') str = str.substring(1, str.length-1)\n    str = str.replace(/ |'|\"/g,'')\n    const props = str.split(',')\n    const obj = {}\n    props.forEach((prop) => {\n        const tup = prop.split(':')\n        if (!tup[1] || isNaN(tup[1])) return '{}'\n        obj[tup[0]] = parseInt(tup[1])\n    })\n    return JSON.stringify(obj)\n  }\n\n}\n\nexport default Collection\n","import React from 'react';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom'\nimport Database from './Database'\nimport Collection from './Collection'\n\nfunction App() {\n\n  // JSX\n\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path='/database' component={ Database } />\n        <Route path='/collection' component={ Collection } />\n        <Redirect from='/' to='/database' />\n      </Switch>\n    </BrowserRouter>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}